defaults:
  - _self_
  - task: mirrorduo_tcp_centered

# ================================================
#       MirrorDuo Essential Hyperparameters 
# ================================================
enable_mirror: False     
enable_overlay: False     
action_mode: null
pretrained: False
seed: 0
# ================================================

name: diff_c_tcp_centered
_target_: mirrorduo.workspace.train_diffusion_unet_hybrid_workspace.TrainDiffusionUnetHybridWorkspace

shape_meta: ${task.shape_meta}
exp_name: "default"
task_name: square_d0
n_demo: 200
horizon: 16
n_obs_steps: 2
n_action_steps: 8
n_latency_steps: 0
dataset_obs_steps: ${n_obs_steps}
past_action_visible: False
obs_as_global_cond: True
dataset: mirrorduo.dataset.robomimic_replay_image_mirrorduo_dataset.RobomimicReplayMirrorDuoImageDataset
dataset_path: data/${task_name}/${task_name}_offcenter_mirrorduo_200_plus_40.hdf5
n_envs: 56
env_name: null

robo_augmentor:
  mirror:
    enable: ${enable_mirror}
    prob: 0.5
    mode: "batch_wise"

  overlay:
    enable: ${enable_overlay}
    prob: 0.5
    warmup_epochs: ${eval:'4000 / ${n_demo}'}
    input_shape: [84, 84]
    blend_alpha: 0.5
    background_path: 'data/backgrounds'

policy:
  _target_: mirrorduo.policy.diffusion_unet_hybrid_image_policy.DiffusionUnetHybridImagePolicy

  shape_meta: ${shape_meta}
  
  noise_scheduler:
    _target_: diffusers.schedulers.scheduling_ddpm.DDPMScheduler
    num_train_timesteps: 100
    beta_start: 0.0001
    beta_end: 0.02
    beta_schedule: squaredcos_cap_v2
    variance_type: fixed_small # Yilun's paper uses fixed_small_log instead, but easy to cause Nan
    clip_sample: True # required when predict_epsilon=False
    prediction_type: epsilon # or sample

  horizon: ${horizon}
  n_action_steps: ${eval:'${n_action_steps}+${n_latency_steps}'}
  n_obs_steps: ${n_obs_steps}
  num_inference_steps: 100
  obs_as_global_cond: ${obs_as_global_cond}
  crop_shape: [76, 76]
  # crop_shape: null
  diffusion_step_embed_dim: 128
  down_dims: [512, 1024, 2048]
  kernel_size: 5
  n_groups: 8
  cond_predict_scale: True
  obs_encoder_group_norm: True
  eval_fixed_crop: True
  pretrained: ${pretrained}


ema:
  _target_: equi_diffpo.model.diffusion.ema_model.EMAModel
  update_after_step: 0
  inv_gamma: 1.0
  power: 0.75
  min_value: 0.0
  max_value: 0.9999

dataloader:
  batch_size: 128
  num_workers: 4
  shuffle: True
  pin_memory: True
  persistent_workers: True

val_dataloader:
  batch_size: 128
  num_workers: 4
  shuffle: False
  pin_memory: True
  persistent_workers: True

optimizer:
  _target_: torch.optim.AdamW
  lr: 1.0e-4
  betas: [0.95, 0.999]
  eps: 1.0e-8
  weight_decay: 1.0e-6

training:
  device: "cuda:0"
  seed: ${seed}
  debug: False
  resume: True
  # optimization
  lr_scheduler: cosine
  lr_warmup_steps: 500
  num_epochs: ${eval:'50000 / ${n_demo}'}
  gradient_accumulate_every: 1
  # EMA destroys performance when used with BatchNorm
  # replace BatchNorm with GroupNorm.
  use_ema: True
  # training loop control
  # in epochs
  rollout_every: 10
  checkpoint_every: 10
  val_every: 5
  sample_every: 5
  # steps per epoch
  max_train_steps: null
  max_val_steps: null
  # misc
  tqdm_interval_sec: 1.0

logging:
  project: ${task_name}_seed_${seed}
  resume: True
  mode: online
  name: ${name}_${n_demo}_${action_mode}_mirror_${enable_mirror}_overlay_${enable_overlay}_pretrained_${pretrained}
  tags: ["${name}", "${task_name}", "${exp_name}"]
  id: null
  group: null

checkpoint:
  topk:
    monitor_key: test_mean_score
    mode: max
    k: 3
    format_str: 'epoch={epoch:04d}-test_mean_score={test_mean_score:.3f}.ckpt'
  save_last_ckpt: True
  save_last_snapshot: False

multi_run:
  run_dir: data/outputs/${now:%Y.%m.%d}/${now:%H.%M.%S}_${name}_${task_name}
  wandb_name_base: ${now:%Y.%m.%d-%H.%M.%S}_${name}_${task_name}

hydra:
  job:
    override_dirname: ${name}
  run:
    dir: experiments/mirrorduo/${task_name}_seed_${seed}/${name}_${n_demo}_${action_mode}_mirror_${enable_mirror}_overlay_${enable_overlay}_pretrained_${pretrained}
  sweep:
    dir: experiments/mirrorduo/${task_name}_seed_${seed}/${name}_${n_demo}_${action_mode}_mirror_${enable_mirror}_overlay_${enable_overlay}_pretrained_${pretrained}
    subdir: ${hydra.job.num}
